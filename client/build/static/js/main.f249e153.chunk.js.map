{"version":3,"sources":["Home.js","StreamingRoom.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","roomName","setRoomName","className","Divider","TextField","value","onChange","event","target","to","Button","socket","io","transports","upgrade","TabPanel","props","children","index","other","role","hidden","id","aria-labelledby","Box","p","a11yProps","StreamingRoom","match","params","viewTheme","useTheme","videoRef","useRef","username","setUsername","newUserName","setNewUserName","color","setColor","userRole","setRole","newMsg","setNewMsg","receivedMsg","setReceivedMsg","tabValue","setTabValue","newURL","setNewURL","playlist","setPlaylist","url","playing","volume","played","loaded","duration","playbackRate","loop","videoProp","setVideoProp","userlist","setUserList","useEffect","emit","on","message","incomingMessage","sentByCurrentUser","sender","items","data","userId","user","current","getCurrentTime","seekTo","console","log","disconnect","removePlaylistItem","clone","splice","changeCurrentVideo","playNextVideo","AppBar","position","Toolbar","edge","Grid","container","justify","alignItems","item","sm","ref","width","height","state","parseFloat","IconButton","onClick","SkipNext","Screenfull","request","findDOMNode","Fullscreen","VolumeUp","Slider","defaultValue","e","Paper","Input","placeholder","ReactPlayer","canPlay","isPlaying","alert","AddBox","Tabs","newValue","indicatorColor","variant","aria-label","Tab","icon","PlaylistPlay","ChatBubble","People","axis","direction","onChangeIndex","List","dense","map","idx","ListItem","key","bind","button","ListItemText","primary","ListItemSecondaryAction","Delete","i","style","label","room","Send","Check","GitHub","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f249e153.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { TextField, Button, Divider } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\n\r\nfunction Home() {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n\r\n    const handleRoomNameInput = (event) => {\r\n        setRoomName(event.target.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h2>Youtube Sync</h2>\r\n            <span>Watch Youtube videos with your friends!</span>\r\n            <Divider />\r\n            <div className=\"room-selection\">\r\n                <span>Enter Channel</span>\r\n                <TextField className=\"room-name-input\" value={roomName} onChange={handleRoomNameInput}></TextField>\r\n                <Link to={`r/${roomName}`} className=\"enter-room-button\"><Button>Join Room</Button></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home; ","import React, { useState, useEffect, useRef } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport PropTypes from 'prop-types';\r\nimport Screenfull from 'screenfull';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { Link } from \"react-router-dom\";\r\nimport { TextField, Paper, IconButton, AppBar, Slider,\r\n         Toolbar, Button, Grid, Tabs, Tab, Box,\r\n         Input, List, ListItem, ListItemText, ListItemSecondaryAction} from '@material-ui/core';\r\nimport { Send, PlaylistPlay, ChatBubble, GitHub, Pause, PlayArrow,\r\n         SkipNext, AddBox, Delete, Check, VolumeUp, Fullscreen,\r\n         People } from '@material-ui/icons';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport ReactPlayer from 'react-player/youtube';\r\nimport { findDOMNode } from 'react-dom';\r\n\r\n\r\nconst NEW_MESSAGE = 'new_message';\r\nconst socket = io({ transports: ['websocket'], upgrade: false });\r\n\r\nconst StreamingRoom = (props) => {\r\n    \r\n    const roomName = props.match.params.roomName;\r\n    const viewTheme = useTheme();\r\n\r\n    // SOCKET.IO parameters\r\n    const PLAY_VIDEO = \"play_video\";\r\n\r\n    const videoRef = useRef(null);\r\n\r\n    // User info\r\n    const [ username, setUsername ] = useState(\"\");\r\n    const [ newUserName, setNewUserName ] = useState(\"\");\r\n    const [ color, setColor ] = useState(\"\");\r\n    const [ userRole, setRole ] = useState(\"\");\r\n\r\n    const [ newMsg, setNewMsg ] = useState(\"\");\r\n    const [ receivedMsg, setReceivedMsg ] = useState([]);\r\n\r\n    const [ tabValue, setTabValue ] = useState(0);\r\n\r\n    const [ newURL, setNewURL ] = useState(\"\");\r\n    const [ playlist, setPlaylist ] = useState([]);\r\n    const [ videoProp, setVideoProp ] = useState({\r\n        url: null,\r\n        playing: true,\r\n        volume: 0.3,\r\n        played: 0,\r\n        loaded: 0,\r\n        duration: 0,\r\n        playbackRate: 1.0,\r\n        loop: false\r\n    });\r\n\r\n    const [ userlist, setUserList ] = useState([]);\r\n    const [ openUserList, setOpenUserList] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        socket.emit('JOIN_ROOM', roomName );\r\n\r\n        socket.on('INCOMING_MESSAGE', message => {\r\n            const incomingMessage = {\r\n                ...message, sentByCurrentUser: message.sender.username === username\r\n            };\r\n            setReceivedMsg( receivedMsg => [...receivedMsg, incomingMessage]);\r\n        });\r\n\r\n        socket.on(\"get_users\", items => {\r\n            setUserList(items);\r\n        });\r\n\r\n        socket.on(\"user_info\", data => {\r\n            setUsername(data.username);\r\n            setNewUserName(data.username);\r\n            setColor(data.color);\r\n            if(data.role !== userRole) {\r\n                socket.emit(\"change_role\", data.role);\r\n                setRole(data.role);\r\n            }\r\n        });\r\n\r\n        socket.on(\"get_playlist\", items => {\r\n            setPlaylist(items);\r\n        });\r\n\r\n        socket.on(\"change_current_video\", url => {\r\n            setVideoProp({...videoProp,  url: url });\r\n        });\r\n\r\n        socket.on(\"current_video_request\", userId => {\r\n            let data = { user: userId, url: videoRef.current.props.url, played: videoRef.current.getCurrentTime()}\r\n            socket.emit(\"current_video_prop\", data);\r\n        });\r\n\r\n        socket.on(\"update_video\", data => {\r\n            setVideoProp({...videoProp,  url: data.url, played: data.played, playing: true });\r\n            videoRef.current.seekTo(data.played);\r\n            console.log(data.played, data.played/100);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        }\r\n    }, [roomName]);\r\n\r\n\r\n    /**\r\n     * React Player methods\r\n     */\r\n    const handleURLInput = () => {\r\n        if (ReactPlayer.canPlay(newURL)) {\r\n            let isPlaying = false;\r\n            if(videoProp.url !==\"\" && videoProp.url !== null) \r\n                isPlaying = true;\r\n            let data = { url: newURL, isPlaying: isPlaying};\r\n            socket.emit(\"add_new_video\", data);\r\n            setNewURL(\"\");\r\n        } else {\r\n            alert(\"this is not a valid link\");\r\n        }    \r\n        \r\n    };\r\n    \r\n    const handleURLChange = (event) => {\r\n        setNewURL(event.target.value);\r\n    }\r\n\r\n    const removePlaylistItem = (index) => {\r\n        let clone = playlist.splice(index, 1);\r\n        setPlaylist(clone);\r\n        socket.emit(\"update_playlist\", playlist);\r\n    }\r\n\r\n    const changeCurrentVideo = (index) => {\r\n        socket.emit(PLAY_VIDEO, index);\r\n    };\r\n\r\n    const playNextVideo = () => {\r\n        socket.emit(PLAY_VIDEO, 0); // plays the next video from the playlist.\r\n    }\r\n\r\n    const handleVolumeChange = (e, value) => {\r\n        setVideoProp({ ...videoProp, volume: parseFloat(value)/100});\r\n    }\r\n\r\n    const handleSeekChange = (e, value) => {\r\n        //setVideoProp({...videoProp, played: parseFloat(value)/100});\r\n        //videoRef.current.seekTo(parseFloat(value)/100);\r\n        let data = { user: \"all\", url: videoRef.current.props.url, played: parseFloat(value)/100}\r\n        socket.emit(\"current_video_prop\", data);\r\n    }\r\n    \r\n    const handleProgress = (state) => {\r\n        setVideoProp({...videoProp,  played: parseFloat(state.played), playing: true });\r\n    }\r\n\r\n    const handlePlayPause = () => {\r\n        setVideoProp({...videoProp, playing: !videoRef.current.props.playing });\r\n    }\r\n\r\n    const handleClickFullScreen = () => {\r\n        Screenfull.request(findDOMNode(videoRef.current));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleMessageInput = (event) => {\r\n        setNewMsg(event.target.value);\r\n    };\r\n\r\n\r\n    \r\n\r\n    const submitMessage = () => {\r\n        let sender = { username: username, color: color};\r\n        let data = { sender: sender, message: newMsg, room: roomName};\r\n        socket.emit(NEW_MESSAGE, data);\r\n        setNewMsg(\"\");\r\n    };\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setTabValue(newValue);\r\n    };\r\n    \r\n    const handleChangeViewIndex = (index) => {\r\n        setTabValue(index);\r\n    };\r\n\r\n    const handleUserNameButton = () => {\r\n        setOpenUserList(!openUserList);\r\n    }\r\n\r\n    const handleNewUserNameChange = (event) => {\r\n        setNewUserName(event.target.value);\r\n    };\r\n    \r\n    const submitNewUserName = () => {\r\n        socket.emit(\"change_username\", newUserName);\r\n    }\r\n\r\n    const renderPlayList = () => {\r\n        if(userRole === \"admin\") {\r\n            return playlist.map((item, idx) => (\r\n                <ListItem key={idx} onClick={changeCurrentVideo.bind(null, idx)} button>\r\n                    <ListItemText primary={item} />\r\n                    \r\n                    <ListItemSecondaryAction>\r\n                        <IconButton edge=\"end\" aria-label=\"delete\" onClick={removePlaylistItem.bind(null, idx)}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n            ));\r\n        } else {\r\n            return playlist.map((item, idx) => (\r\n                <ListItem key={idx}>\r\n                    <ListItemText primary={item} />\r\n                </ListItem>\r\n            ));\r\n        }\r\n    };\r\n\r\n    const renderChat = () => {\r\n        return receivedMsg.map(({sender, message}, i) => (\r\n            <div key={i}>\r\n                <span className=\"sender\" style={{ color: sender.color}}>{sender.username}</span>\r\n                <span className=\"message\">{message}</span>\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    \r\n\r\n    const renderUserList = () => {\r\n        return userlist.map((item, idx) => (\r\n            <ListItem key={idx}>\r\n                <span style={{color: item.color}}> {item.username}</span>\r\n            </ListItem>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div className =\"root\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar className=\"app-header\">\r\n                    <Link to={\"/\"} edge=\"start\">YT Sync</Link>\r\n                    <span edge=\"end\" color=\"inherit\" >Hello! {username}</span>\r\n                </Toolbar>\r\n            </AppBar> \r\n            <Grid container className=\"room-container\" justify=\"space-between\" alignItems=\"stretch\">\r\n                <Grid item sm className=\"video-container\">\r\n                    <ReactPlayer \r\n                        ref = {videoRef}\r\n                        className=\"react-player\"\r\n                        id=\"streaming-player\"\r\n                        playing = {videoProp.playing}\r\n                        url={videoProp.url}\r\n                        duration={videoProp.duration}\r\n                        width=\"100%\"\r\n                        height=\"80vh\"\r\n                        volume= {videoProp.volume}\r\n                        playing={videoProp.playing} \r\n                        onEnded = {playNextVideo}\r\n                        onProgress={handleProgress}\r\n                        onPause={handlePlayPause}\r\n                    />\r\n\r\n                    <div className=\"player-toolbar\" hidden={userRole !== \"admin\"}>\r\n                        <Toolbar className=\"player-toolbar\">\r\n                            <IconButton color=\"default\" onClick={playNextVideo}><SkipNext /></IconButton>\r\n                            <IconButton color=\"default\" onClick={handleClickFullScreen}><Fullscreen /></IconButton>\r\n                        </Toolbar>\r\n                        <div>\r\n                            <VolumeUp />\r\n                            <Slider defaultValue={30} onChange={handleVolumeChange} \r\n                                aria-labelledby=\"continuous-slider\"/>\r\n                        </div>\r\n                        <div>\r\n                            <Slider value={videoProp.played*100} onChange={handleSeekChange}/>\r\n                        </div>\r\n                        <Paper>\r\n                            <Input placeholder=\"url...\" value={newURL} onChange={handleURLChange} />\r\n                            <IconButton color=\"default\" onClick={handleURLInput}><AddBox /></IconButton>\r\n                        </Paper>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item sm className=\"user-control\">\r\n                    <Paper className=\"user-control-container\">\r\n                        <AppBar position=\"static\" color=\"default\">\r\n                            <Tabs value={tabValue} onChange={handleTabChange}\r\n                                indicatorColor=\"primary\" variant=\"fullWidth\" aria-label=\"user-control-tabs\">\r\n                                <Tab icon={<PlaylistPlay />} aria-label=\"playlist-container\" {...a11yProps(0)}/>\r\n                                <Tab icon={<ChatBubble />} aria-label=\"chat-container\" {...a11yProps(1)}/>\r\n                                <Tab icon={<People />} aria-label=\"userlist-container\" {...a11yProps(2)}/>\r\n                            </Tabs>\r\n                        </AppBar>\r\n                        <SwipeableViews\r\n                            axis={viewTheme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                            index={tabValue}\r\n                            onChangeIndex={handleChangeViewIndex}\r\n                        >\r\n                            <TabPanel value={tabValue} index={0} className=\"playlist-container\">\r\n                                <span className=\"now-playing\"> Now Playing: {videoProp.url} </span> \r\n                                <List dense className=\"current-playlist\">\r\n                                    {renderPlayList()}\r\n                                </List>\r\n                            </TabPanel>\r\n                            <TabPanel value={tabValue} index={1} className=\"chat-container\">\r\n                                <div className = \"chat-message-list\">\r\n                                    {renderChat()}\r\n                                </div>\r\n                                <div className = \"chat-user-input\">\r\n                                    <TextField label=\"standard\" value={newMsg} onChange = { handleMessageInput } />\r\n                                    <IconButton color=\"primary\" onClick= {submitMessage}><Send /></IconButton>\r\n                                </div>\r\n                            </TabPanel>\r\n                            <TabPanel value={tabValue} index={2} className=\"userlist-container\">\r\n                                <div>\r\n                                    <div className=\"username-setting\">\r\n                                        <span>Username:</span>\r\n                                        <Input value={newUserName} onChange={handleNewUserNameChange}/>\r\n                                        <IconButton color=\"primary\" onClick={submitNewUserName}><Check /></IconButton>\r\n                                    </div>\r\n                                    <List dense className=\"connected-users\">\r\n                                        {renderUserList()}\r\n                                    </List>\r\n                                    \r\n                                </div>\r\n                            </TabPanel>\r\n                        </SwipeableViews>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n            <footer>\r\n                <IconButton color=\"default\"><GitHub /></IconButton>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`full-width-tabpanel-${index}`}\r\n        aria-labelledby={`full-width-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3}>\r\n            {children}\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n}\r\n  \r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n  };\r\n  \r\n  function a11yProps(index) {\r\n    return {\r\n      id: `full-width-tab-${index}`,\r\n      'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n  }\r\n  \r\n\r\nexport default StreamingRoom;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport './App.scss';\r\nimport Home from \"./Home\";\r\nimport StreamingRoom from \"./StreamingRoom\";\r\n\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/r/:roomName\" component={StreamingRoom} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  /*\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  */\r\n <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}