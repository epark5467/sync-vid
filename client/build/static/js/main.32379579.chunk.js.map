{"version":3,"sources":["Home.js","StreamingRoom.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","roomName","setRoomName","className","TextField","value","onChange","event","target","to","Button","socket","io","transports","upgrade","TabPanel","props","children","index","other","role","hidden","id","aria-labelledby","Box","p","a11yProps","StreamingRoom","match","params","viewTheme","useTheme","videoRef","useRef","username","setUsername","newUserName","setNewUserName","color","setColor","userRole","setRole","newMsg","setNewMsg","receivedMsg","setReceivedMsg","tabValue","setTabValue","newURL","setNewURL","playlist","setPlaylist","url","playing","volume","played","loaded","duration","playbackRate","loop","videoProp","setVideoProp","userlist","setUserList","useEffect","emit","on","message","incomingMessage","sentByCurrentUser","sender","items","data","userId","user","current","getCurrentTime","seekTo","disconnect","removePlaylistItem","clone","splice","changeCurrentVideo","submitMessage","room","AppBar","position","Toolbar","edge","Grid","container","justify","alignItems","item","ref","width","height","state","parseFloat","VolumeUp","Slider","defaultValue","e","IconButton","onClick","Screenfull","request","findDOMNode","Fullscreen","Paper","elevation","Tabs","newValue","indicatorColor","variant","aria-label","Tab","icon","PlaylistPlay","ChatBubble","People","axis","direction","onChangeIndex","placeholder","ReactPlayer","canPlay","isPlaying","alert","AddBox","List","dense","map","idx","ListItem","key","bind","button","ListItemText","primary","ListItemSecondaryAction","Delete","i","style","onKeyDown","Send","Input","disableUnderline","startAdornment","InputAdornment","AccountCircle","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.32379579.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { TextField, Button, Divider } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\n\r\nfunction Home() {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n\r\n    const handleRoomNameInput = (event) => {\r\n        setRoomName(event.target.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <div className=\"home-header\">\r\n               <h1>SyncVid</h1>\r\n                <span>Watch online videos with your friends!</span> \r\n            </div>\r\n            <div className=\"room-selection\">\r\n                <span className=\"room-selection-text\">Enter Channel</span>\r\n                <TextField className=\"room-name-input\" value={roomName} \r\n                     onChange={handleRoomNameInput}></TextField>\r\n                <Link to={`r/${roomName}`} className=\"enter-room-button\"><Button>Join Room</Button></Link>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home; ","import React, { useState, useEffect, useRef } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport PropTypes from 'prop-types';\r\nimport Screenfull from 'screenfull';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { Link } from \"react-router-dom\";\r\nimport { TextField, Paper, IconButton, AppBar, Slider,\r\n         Toolbar, Button, Grid, Tabs, Tab, Box, InputAdornment,\r\n         Input, List, ListItem, ListItemText, ListItemSecondaryAction} from '@material-ui/core';\r\nimport { Send, PlaylistPlay, ChatBubble, GitHub, AccountCircle,\r\n         SkipNext, AddBox, Delete, Check, VolumeUp, Fullscreen,\r\n         People } from '@material-ui/icons';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport ReactPlayer from 'react-player/youtube';\r\nimport { findDOMNode } from 'react-dom';\r\n\r\n\r\nconst NEW_MESSAGE = 'new_message';\r\nconst socket = io({ transports: ['websocket'], upgrade: false });\r\n\r\nconst StreamingRoom = (props) => {\r\n    \r\n    const roomName = props.match.params.roomName;\r\n    const viewTheme = useTheme();\r\n\r\n    // SOCKET.IO parameters\r\n    const PLAY_VIDEO = \"play_video\";\r\n\r\n    const videoRef = useRef(null);\r\n\r\n    // User info\r\n    const [ username, setUsername ] = useState(\"\");\r\n    const [ newUserName, setNewUserName ] = useState(\"\");\r\n    const [ color, setColor ] = useState(\"\");\r\n    const [ userRole, setRole ] = useState(\"\");\r\n\r\n    const [ newMsg, setNewMsg ] = useState(\"\");\r\n    const [ receivedMsg, setReceivedMsg ] = useState([]);\r\n\r\n    const [ tabValue, setTabValue ] = useState(0);\r\n\r\n    const [ newURL, setNewURL ] = useState(\"\");\r\n    const [ playlist, setPlaylist ] = useState([]);\r\n    const [ videoProp, setVideoProp ] = useState({\r\n        url: null,\r\n        playing: true,\r\n        volume: 0.3,\r\n        played: 0,\r\n        loaded: 0,\r\n        duration: 0,\r\n        playbackRate: 1.0,\r\n        loop: false\r\n    });\r\n\r\n    const [ userlist, setUserList ] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        socket.emit('JOIN_ROOM', roomName );\r\n\r\n        socket.on('INCOMING_MESSAGE', message => {\r\n            const incomingMessage = {\r\n                ...message, sentByCurrentUser: message.sender.username === username\r\n            };\r\n            setReceivedMsg( receivedMsg => [...receivedMsg, incomingMessage]);\r\n        });\r\n\r\n        socket.on(\"get_users\", items => {\r\n            setUserList(items);\r\n        });\r\n\r\n        socket.on(\"user_info\", data => {\r\n            setUsername(data.username);\r\n            setNewUserName(data.username);\r\n            setColor(data.color);\r\n            if(data.role !== userRole) {\r\n                socket.emit(\"change_role\", data.role);\r\n                setRole(data.role);\r\n            }\r\n        });\r\n\r\n        socket.on(\"get_playlist\", items => {\r\n            setPlaylist(items);\r\n        });\r\n\r\n        socket.on(\"change_current_video\", url => {\r\n            setVideoProp({...videoProp,  url: url });\r\n        });\r\n\r\n        socket.on(\"current_video_request\", userId => {\r\n            let data = { user: userId, url: videoRef.current.props.url, played: videoRef.current.getCurrentTime()}\r\n            socket.emit(\"current_video_prop\", data);\r\n        });\r\n\r\n        socket.on(\"update_video\", data => {\r\n            setVideoProp({...videoProp,  url: data.url, played: data.played, playing: true });\r\n            videoRef.current.seekTo(data.played);\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n        }\r\n    }, [roomName]);\r\n\r\n\r\n    /**\r\n     * React Player methods\r\n     */\r\n    const handleURLInput = () => {\r\n        if (ReactPlayer.canPlay(newURL)) {\r\n            let isPlaying = false;\r\n            if(videoProp.url !==\"\" && videoProp.url !== null) \r\n                isPlaying = true;\r\n            let data = { url: newURL, isPlaying: isPlaying};\r\n            socket.emit(\"add_new_video\", data);\r\n            setNewURL(\"\");\r\n        } else {\r\n            alert(\"this is not a valid link\");\r\n        }\r\n    };\r\n    \r\n    const handleURLChange = (event) => {\r\n        setNewURL(event.target.value);\r\n    }\r\n\r\n    const removePlaylistItem = (index) => {\r\n        let clone = playlist.splice(index, 1);\r\n        setPlaylist(clone);\r\n        socket.emit(\"update_playlist\", playlist);\r\n    }\r\n\r\n    const changeCurrentVideo = (index) => {\r\n        socket.emit(PLAY_VIDEO, index);\r\n    };\r\n\r\n    const playNextVideo = () => {\r\n        socket.emit(PLAY_VIDEO, 0); // plays the next video from the playlist.\r\n    }\r\n\r\n    const handleVolumeChange = (e, value) => {\r\n        setVideoProp({ ...videoProp, volume: parseFloat(value)/100});\r\n    }\r\n\r\n    const handleSeekChange = (e, value) => {\r\n        //setVideoProp({...videoProp, played: parseFloat(value)/100});\r\n        //videoRef.current.seekTo(parseFloat(value)/100);\r\n        let data = { user: \"all\", url: videoRef.current.props.url, played: parseFloat(value)/100}\r\n        socket.emit(\"current_video_prop\", data);\r\n    }\r\n    \r\n    const handleProgress = (state) => {\r\n        setVideoProp({...videoProp,  played: parseFloat(state.played), playing: true });\r\n    }\r\n\r\n    const handlePlayPause = () => {\r\n        setVideoProp({...videoProp, playing: !videoRef.current.props.playing });\r\n    }\r\n\r\n    const handleClickFullScreen = () => {\r\n        Screenfull.request(findDOMNode(videoRef.current));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const messageInputKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            submitMessage();\r\n        }\r\n    };\r\n\r\n    const handleMessageInput = (event) => {\r\n        setNewMsg(event.target.value);\r\n    };\r\n\r\n    const submitMessage = () => {\r\n        let sender = { username: username, color: color};\r\n        let data = { sender: sender, message: newMsg, room: roomName};\r\n        socket.emit(NEW_MESSAGE, data);\r\n        setNewMsg(\"\");\r\n    };\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setTabValue(newValue);\r\n    };\r\n    \r\n    const handleChangeViewIndex = (index) => {\r\n        setTabValue(index);\r\n    };\r\n\r\n    const userNameKeyPress = (event) => {\r\n        if(event.key === 'Enter') {\r\n            socket.emit(\"change_username\", newUserName);\r\n        }\r\n    };\r\n\r\n    const handleNewUserNameChange = (event) => {\r\n        setNewUserName(event.target.value);\r\n        \r\n    };\r\n\r\n    const renderPlayList = () => {\r\n        if(userRole === \"admin\") {\r\n            return playlist.map((item, idx) => (\r\n                <ListItem key={idx} onClick={changeCurrentVideo.bind(null, idx)} button>\r\n                    <ListItemText primary={item} />\r\n                    \r\n                    <ListItemSecondaryAction>\r\n                        <IconButton edge=\"end\" color=\"secondary\" aria-label=\"delete\" onClick={removePlaylistItem.bind(null, idx)}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n            ));\r\n        } else {\r\n            return playlist.map((item, idx) => (\r\n                <ListItem key={idx}>\r\n                    <ListItemText primary={item} />\r\n                </ListItem>\r\n            ));\r\n        }\r\n    };\r\n\r\n    const renderChat = () => {\r\n        return receivedMsg.map(({sender, message}, i) => (\r\n            <ListItem className=\"message-item\" key={i}>\r\n                <span className=\"sender\" style={{ color: sender.color}}>{sender.username}</span>\r\n                <span className=\"message\">{message}</span>\r\n            </ListItem>\r\n        ));\r\n    };\r\n\r\n    \r\n\r\n    const renderUserList = () => {\r\n        return userlist.map((item, idx) => (\r\n            <ListItem key={idx}>\r\n                <span style={{color: item.color}}> {item.username}</span>\r\n            </ListItem>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div className =\"root\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar className=\"app-header\">\r\n                    <Link className=\"header-home\" to={\"/\"} edge=\"start\">SyncVid</Link>\r\n                    <span className=\"header-username\" edge=\"end\" color=\"inherit\" >Hello! {username}</span>\r\n                </Toolbar>\r\n            </AppBar> \r\n            <Grid container className=\"room-container\" justify=\"space-between\" alignItems=\"stretch\">\r\n                <Grid item className=\"video-container\">\r\n                    <Grid>\r\n                        <Grid item className=\"video-wrapper\">\r\n                            <ReactPlayer \r\n                                ref = {videoRef}\r\n                                className=\"react-player\"\r\n                                id=\"streaming-player\"\r\n                                playing = {videoProp.playing}\r\n                                url={videoProp.url}\r\n                                duration={videoProp.duration}\r\n                                width=\"100%\"\r\n                                height=\"75vh\"\r\n                                volume= {videoProp.volume}\r\n                                playing={videoProp.playing} \r\n                                onEnded = {playNextVideo}\r\n                                onProgress={handleProgress}\r\n                                onPause={handlePlayPause}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className=\"common-toolbar\">\r\n                            <VolumeUp />\r\n                            <Slider className=\"volume-slider\" defaultValue={30} onChange={handleVolumeChange} aria-labelledby=\"continuous-slider\"/>\r\n                            <IconButton color=\"default\" onClick={handleClickFullScreen}><Fullscreen /></IconButton>\r\n                        </Grid>\r\n                        <Grid item className=\"admin-toolbar\" hidden={userRole !== \"admin\"}>\r\n                            <Slider className=\"video-seek-slider\" value={videoProp.played*100} onChange={handleSeekChange}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item className=\"user-control\">\r\n                    <Paper className=\"user-control-container\" elevation={1}>\r\n                        <AppBar position=\"static\" color=\"default\" elevation={1}>\r\n                            <Tabs value={tabValue} onChange={handleTabChange}\r\n                                indicatorColor=\"primary\" variant=\"fullWidth\" aria-label=\"user-control-tabs\">\r\n                                <Tab icon={<PlaylistPlay />} aria-label=\"playlist-container\" {...a11yProps(0)}/>\r\n                                <Tab icon={<ChatBubble />} aria-label=\"chat-container\" {...a11yProps(1)}/>\r\n                                <Tab icon={<People />} aria-label=\"userlist-container\" {...a11yProps(2)}/>\r\n                            </Tabs>\r\n                        </AppBar>\r\n                        <SwipeableViews\r\n                            axis={viewTheme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                            index={tabValue}\r\n                            onChangeIndex={handleChangeViewIndex}\r\n                            className=\"user-control-content\"\r\n                        >\r\n                            <TabPanel value={tabValue} index={0} className=\"playlist-container\">\r\n                                <Toolbar hidden={userRole !== \"admin\"} className=\"add-new-video\">\r\n                                    <input className=\"new-video-url\" placeholder=\"url...\" value={newURL} onChange={handleURLChange}/>\r\n                                    <IconButton color=\"default\" onClick={handleURLInput}><AddBox /></IconButton>\r\n                                </Toolbar>\r\n                                <span className=\"now-playing\"> Now Playing <span className=\"currentUrl\">{videoProp.url}</span> </span> \r\n                                <List dense className=\"current-playlist\">\r\n                                    {renderPlayList()}\r\n                                </List>\r\n                            </TabPanel>\r\n                            <TabPanel value={tabValue} index={1} className=\"chat-container\">\r\n                                <List dense className = \"chat-message-list\">\r\n                                    {renderChat()}\r\n                                </List>\r\n                                <Toolbar className = \"chat-user-input\">\r\n                                    <TextField className=\"username-input\"value={newMsg} \r\n                                        onKeyDown={messageInputKeyDown} onChange = { handleMessageInput } />\r\n                                    <IconButton color=\"primary\" onClick= {submitMessage}><Send /></IconButton>\r\n                                </Toolbar>\r\n                            </TabPanel>\r\n                            <TabPanel value={tabValue} index={2} className=\"userlist-container\">\r\n                                <div className=\"username-setting\">\r\n                                    <Input className=\"username-input\" value={newUserName} onChange={handleNewUserNameChange}\r\n                                        onKeyDown={userNameKeyPress} disableUnderline={true}\r\n                                        startAdornment = {\r\n                                            <InputAdornment position=\"start\">\r\n                                                <AccountCircle />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                                <List dense className=\"connected-users\">\r\n                                    {renderUserList()}\r\n                                </List>\r\n                            </TabPanel>\r\n                        </SwipeableViews>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n            <footer>\r\n                \r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`full-width-tabpanel-${index}`}\r\n        aria-labelledby={`full-width-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3}>\r\n            {children}\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n}\r\n  \r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n  };\r\n  \r\n  function a11yProps(index) {\r\n    return {\r\n      id: `full-width-tab-${index}`,\r\n      'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n  }\r\n  \r\n\r\nexport default StreamingRoom;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport './App.scss';\r\nimport Home from \"./Home\";\r\nimport StreamingRoom from \"./StreamingRoom\";\r\n\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/r/:roomName\" component={StreamingRoom} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  /*\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  */\r\n <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}